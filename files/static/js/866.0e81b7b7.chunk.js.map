{"version":3,"file":"static/js/866.0e81b7b7.chunk.js","mappings":"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","sources":["api/index.js","components/temp-val/index.js","config/constant.js","config/weather-coin.js","utils/index.js","components/chart/index.js","components/week-weather/index.js","routes/Detail/index.js"],"sourcesContent":["\n\nconst getWeather = () => {\n  return fetch('https://v0.yiketianqi.com/api?unescape=1&version=v63&appid=24821484&appsecret=68vvf7Pf&cityId=101210101').then(res => {\n    return res.json()\n  })\n}\n\nconst getWeatherOfWeek = () => {\n  return fetch('https://www.tianqiapi.com/api/?version=v1&appid=24821484&appsecret=68vvf7Pf&cityId=101210101').then(res => {\n    return res.json()\n  })\n}\n\nexport {\n  getWeather,\n  getWeatherOfWeek\n}","\nimport React from 'react'\nimport './index.scss'\n\nconst valSizes = {\n  large: 'temp-val-large',\n  medium: 'temp-val-medium',\n  small: 'temp-val-small',\n}\nconst unitSizes = {\n  large: 'temp-unit-large',\n  medium: 'temp-unit-medium',\n  small: 'temp-unit-small',\n}\n\nconst TempVal = ({ temp, size }) => {\n\n  return (\n    <div className=\"weather-temp\">\n      <span className={'temp-val ' + valSizes[size]}>{temp}</span>\n      <span className={'temp-unit ' + unitSizes[size]}>℃</span>\n    </div>\n  )\n}\n\nexport default TempVal","\nexport const SAVED_WEATHER = 'SAVED_WEATHER'","\n\nimport sunDay from '../assets/sun-day.png'\nimport cloudsDay from '../assets/clouds-day.png'\nimport rainDay from '../assets/rain-day.png'\nimport windDay from '../assets/wind.png'\nimport snowDay from '../assets/snow-day.png'\nimport eleDay from '../assets/ele-day.png'\n\nimport sunNight from '../assets/sun-night.png'\nimport cloudsNight from '../assets/clouds-night.png'\nimport rainNight from '../assets/rain-night.png'\nimport windNight from '../assets/wind-night.png'\nimport snowNight from '../assets/snow-night.png'\nimport eleNight from '../assets/ele-night.png'\n\n\nconst icons = {\n  '多云': {\n    day: cloudsDay,\n    night: cloudsNight\n  },\n  '晴': {\n    day: sunDay,\n    night: sunNight\n  },\n  '雨': {\n    day: rainDay,\n    night: rainNight\n  },\n  '风': {\n    day: windDay,\n    night: windNight\n  },\n  '雪': {\n    day: snowDay,\n    night: snowNight\n  },\n  '雷': {\n    day: eleDay,\n    night: eleNight\n  }\n}\n\nfunction checkIsNight (date, time, sunrise, sunset) {\n  const sunriseTime = new Date(`${date} ${sunrise}:00`).getTime()\n  const sunsetTime = new Date(`${date} ${sunset}:00`).getTime()\n  const timeTime = new Date(`${date} ${time}:00`).getTime()\n  if (timeTime > sunriseTime && timeTime < sunsetTime) {\n    return false\n  }\n  return true\n}\n\n\nfunction getWeaIcon (weather) {\n  const wea = weather.wea\n  const isNight = checkIsNight(weather.date, weather.update_time, weather.sunrise, weather.sunset)\n  const dayOrNight = isNight ? 'night' : 'day'\n  if (icons[wea])\n    return icons[wea][dayOrNight]\n  if (wea.indexOf('晴') > -1) {\n    if (wea.indexOf('多云') > -1) {\n      return icons['多云'][dayOrNight]\n    } else if (wea.indexOf('风') > -1) {\n      return icons['风'][dayOrNight]\n    } else if (wea.indexOf('雨') > -1) {\n      return icons['雨'][dayOrNight]\n    } else if (wea.indexOf('雪') > -1) {\n      return icons['雪'][dayOrNight]\n    } else if (wea.indexOf('雷') > -1) {\n      return icons['雷'][dayOrNight]\n    }\n    return icons['晴'][dayOrNight]\n  } else if (wea.indexOf('多云') > -1) {\n    return icons['多云'][dayOrNight]\n  } else if (wea.indexOf('风')) {\n    return icons['风'][dayOrNight]\n  } else if (wea.indexOf('雨') > -1) {\n    return icons['雨'][dayOrNight]\n  } else if (wea.indexOf('雪') > -1) {\n    return icons['雪'][dayOrNight]\n  } else if (wea.indexOf('雷') > -1) {\n    return icons['雷'][dayOrNight]\n  }\n  return icons['晴'][dayOrNight]\n}\n\nexport default getWeaIcon","\n\n\nimport filledRain from '../assets/filled-rain.png'\nimport filledWind from '../assets/filled-wind.png'\nimport filledHumidity from '../assets/filled-humidity.png'\n\nconst getIcons = (weather) => {\n  const icons = [{\n    icon: filledRain,\n    alt: '降水量',\n    val: weather.rain || '--',\n    color: '#658ED9',\n    bg: 'rgba(101, 142, 217, 0.1)'\n  }, {\n    icon: filledHumidity,\n    alt: '湿度',\n    val: weather.humidity,\n    color: '#D86191',\n    bg: 'rgba(216, 97, 145, 0.1)'\n  }, {\n    icon: filledWind,\n    alt: '风速',\n    val: weather.win_meter,\n    color: '#5E4FC1',\n    bg: 'rgba(94, 79, 193, 0.1)'\n  }]\n  return icons\n}\n\n\nexport {\n  getIcons\n}","\nimport { Canvas, Chart, Line, Axis, Area } from '@antv/f2';\nimport React, { useEffect } from 'react';\nimport './index.scss'\n\nimport TempVal from '../temp-val'\n\n\nconst createChart = (data) => {\n  const scale = {\n    hours: {\n      range: [0, 1],\n    }\n  };\n  const context = document.getElementById('chartRef').getContext('2d');\n  const LineChart = (\n    <Canvas context={context} pixelRatio={window.devicePixelRatio}>\n      <Chart data={data} scale={scale}>\n        <Axis\n          field=\"hours\"\n          style={{\n            label: {\n              align: 'between',\n              fontSize: '14'\n            },\n            labelOffset: 10\n          }}\n        />\n        <Area x=\"hours\" y=\"tem\" color=\"rgba(233, 201, 57, 1)\" shape=\"smooth\" />\n        <Line x=\"hours\" y=\"tem\" shape=\"smooth\" color=\"#E9C939\" />\n      </Chart>\n    </Canvas>\n  );\n\n  const chart = new Canvas(LineChart.props);\n  chart.render();\n}\n\n\nconst WeatherChart = ({hours}) => {\n  console.log(hours)\n\n  useEffect(() => {\n    createChart(hours)\n  }, [hours])\n\n\n  return (\n    <>\n      <div className=\"detail-content\">\n        <canvas id=\"chartRef\" className=\"chart-container\" />\n      </div>\n      <div className=\"week-weather-container\">\n        { hours.slice(0, 3).map(v => (\n          <div\n            className=\"selected-hours\"\n            key={v.date}\n          >\n            <TempVal temp={v.tem} size=\"small\" />\n            <p className=\"hour-val\">{v.hours}</p>\n          </div>\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport default WeatherChart;\n","\nimport React, { useState, useEffect } from 'react'\n\nimport { getWeatherOfWeek } from '../../api'\nimport './index.scss'\n\nconst WeekWeather = () => {\n  const [week, setWeek] = useState([])\n\n  useEffect(() => {\n    getWeatherOfWeek().then(week => {\n      setWeek(week.data)\n    })\n  }, [])\n\n  return (\n    <div className=\"week-forcast\">\n      { week.map(v => (\n        <div\n          className='day-line'\n          key={v.date}\n        >\n          <p className=\"day-name\">{v.week}</p>\n          <p className=\"day-name\">{v.wea}</p>\n          {/* <img className=\"weather-img\" src=\"\" alt=\"天气图标\" /> */}\n          <div className=\"temp-range\">\n            <p className=\"temp-val\">{v.tem1}</p>\n            <p className=\"temp-val gray\">{v.tem2}</p>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default WeekWeather","\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from 'react-router-dom'\n\nimport './index.scss'\n\nimport backIcon from '../../assets/back.png'\nimport { getIcons } from '../../utils'\n\nimport TempVal from '../../components/temp-val'\nimport WeatherChart from \"../../components/chart\";\nimport WeekWeather from \"../../components/week-weather\";\n\nimport { SAVED_WEATHER } from '../../config/constant'\nimport { getWeather  } from \"../../api\";\nimport getWeaIcon from '../../config/weather-coin'\n\nconst Detail = () => {\n  const [weather, setWeather] = useState(null)\n\n  useEffect(() => {\n    const saved = localStorage.getItem(SAVED_WEATHER)\n    if (!saved) {\n      getWeather().then(weather => {\n        setWeather(weather)\n      })\n    } else {\n      setWeather(JSON.parse(saved))\n    }\n  }, [])\n\n  return (\n    <>\n    { weather ? (\n      <div className=\"detail-container\">\n        <Link to=\"/\" replace>\n          <img className=\"back-icon\" src={backIcon} alt=\"返回按钮\" />\n        </Link>\n        <img className=\"weather-img\" src={getWeaIcon(weather)} alt=\"天气图标\" />\n        <div className=\"detail-header\">\n          <p className=\"header-title\">{weather.city}市</p>\n          <TempVal temp={weather.tem} size=\"large\" />\n        </div>\n  \n        <div className=\"info-line\">\n          { getIcons(weather).map(v => (\n            <div\n              key={v.color}\n              className=\"info-icon\"\n              style={{background: v.bg}}\n            >\n              <img\n                className=\"icon-img\"\n                src={v.icon}\n                alt={v.alt}\n              />\n              <span\n                className=\"icon-text\"\n                style={{color: v.color}}\n              >\n                {v.val}\n              </span>\n            </div>\n          ))}\n        </div>\n  \n        <p className=\"title-text\">Today</p>\n  \n        <WeatherChart hours={weather.hours} />\n  \n        <WeekWeather />\n      </div>\n    ) : ''}\n    </>\n  )\n}\n\nexport default Detail"],"names":["getWeather","fetch","then","res","json","getWeatherOfWeek","valSizes","large","medium","small","unitSizes","temp","size","className","SAVED_WEATHER","icons","day","cloudsDay","night","sunDay","sunNight","rainDay","windDay","snowDay","eleDay","weather","wea","dayOrNight","date","time","sunrise","sunset","sunriseTime","Date","getTime","sunsetTime","timeTime","checkIsNight","update_time","indexOf","getIcons","icon","filledRain","alt","val","rain","color","bg","filledHumidity","humidity","filledWind","win_meter","hours","console","log","useEffect","data","context","document","getElementById","getContext","LineChart","pixelRatio","window","devicePixelRatio","scale","range","field","style","label","align","fontSize","labelOffset","x","y","shape","Canvas","props","render","createChart","id","slice","map","v","tem","useState","week","setWeek","tem1","tem2","setWeather","saved","localStorage","getItem","JSON","parse","to","replace","src","backIcon","getWeaIcon","city","background"],"sourceRoot":""}